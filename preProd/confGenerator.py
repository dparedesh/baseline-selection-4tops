#!/usr/bin/env python

import os, shutil,sys
import argparse

def Intro (f):
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# SELECTION CONFIGURATION                                                      #\n")
    f.write("#                                                                              #\n")
    f.write("# This is a TTHbbLeptonic configuration for the AnalysisTop utility top-xaod.  #\n")
    f.write("#                                                                              #\n")
    f.write("# - TTHbbLeptonic: http://cern.ch/go/m989                                      #\n")
    f.write("# - top-xaod:      http://cern.ch/go/D8bk                                      #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n")


def PackageLibraries(f,channel):
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# PACKAGE LIBRARIES                                                            #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n");
    f.write("LibraryNames libTopEventSelectionTools libTopEventReconstructionTools  libTTHbbLeptonic  libJetSubStructureUtils libSM4topsCommon libSM4tops"+channel+"\n")
    f.write("\n");

def ObjectCollection(f,channel):
    # Same object collections at the moment for the two channels
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# OBJECT COLLECTIONS                                                           #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n");
    f.write("ElectronCollectionName Electrons\n")
    f.write("MuonCollectionName Muons\n")
    f.write("TauCollectionName None\n")
    f.write("PhotonCollectionName None\n")
    f.write("METCollectionName MET_Reference_AntiKt4EMPFlow\n")
    f.write("LooseMETCollectionName MET_Reference_AntiKt4EMPFlow\n")
    f.write("\n");
    f.write("JetCollectionName AntiKt4EMPFlowJets_BTagging201903\n")
    f.write("BTagCDIPath xAODBTaggingEfficiency/13TeV/2020-21-13TeV-MC16-CDI-2020-03-11_v3.root\n")
    f.write("\n");
    f.write("## options for large-R jets\n")
    f.write("LargeJetCollectionName AntiKt10LCTopoTrimmedPtFrac5SmallR20Jets\n")
    f.write("LargeJetSubstructure None\n")
    f.write("LargeRJESJMSConfig CombMass\n")
    f.write("\n");
    f.write("# Jet reclustering\n")
    f.write("UseRCJets True\n")
    f.write("RCJetPt 200000.0\n")
    f.write("UseVarRCJets False\n")
    f.write("UseRCJetSubstructure True\n")
    f.write("\n");
    f.write("OverlapRemovalProcedure BoostedSlidingDRMu\n")
    f.write("OverlapRemovalLeptonDef Loose\n")
    f.write("\n");

def TruthCollection(f):
    # Same truth collections for the two channels
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# TRUTH COLLECTIONS AND SETTINGS                                               #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n");
    f.write("#TruthCollectionName None\n")
    f.write("TruthCollectionName TruthParticles\n")
    f.write("#TruthJetCollectionName None\n")
    f.write("TruthJetCollectionName AntiKt4TruthWZJets\n")
    f.write("TopPartonHistory False\n")
    f.write("TruthBlockInfo False\n")
    f.write("PDFInfo False\n")
    f.write("#TopParticleLevel True\n")
    f.write("MCGeneratorWeights Nominal\n")
    f.write("NominalWeightNames \" nominal \",\"nominal\",\"Default\",\"Weight\",\"1001\",\" muR=0.10000E+01 muF=0.10000E+01 \",\"\",\" \",\" dyn=   3 muR=0.10000E+01 muF=0.10000E+01 \",\" mur=1 muf=1 \",\" dyn=  10 muR=0.10000E+01 muF=0.10000E+01 \",\"45\"\n")
    f.write("\n");

def ObjectSelection(f, channel, settings):
    # Writing the config
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# OBJECT LOADER AND OBJECT SELECTIONS                                          #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n")
    f.write("ObjectSelectionName "+settings["ObjectLoader_"+channel]+"\n")
    f.write("\n")
    f.write("BTaggingWP DL1r:FixedCutBEff_60 DL1r:FixedCutBEff_70 DL1r:FixedCutBEff_77 DL1r:FixedCutBEff_85 DL1r:Continuous\n")
    f.write("\n")
    f.write("ElectronID TightLH\n")
    f.write("ElectronIDLoose MediumLH\n")
    f.write("MuonQuality Medium\n")
    f.write("MuonQualityLoose Medium\n")
    f.write("\n")
    f.write("ElectronIsolation FCTight\n")
    f.write("ElectronIsolationLoose None\n")
    f.write("MuonIsolation FCTightTrackOnly\n")
    f.write("MuonIsolationLoose None\n")
    f.write("\n")
    f.write("UseElectronChargeIDSelection "+settings["UseECID_"+channel]+"\n")
    f.write("ElectronPt "+str(settings["ElectronPt_"+channel])+"\n")
    f.write("ElectronPt "+str(settings["ElectronPt_"+channel])+"\n")
    f.write("MuonPt "+str(settings["MuonPt_"+channel])+"\n")
    f.write("JetPt "+str(settings["JetPt_"+channel])+"\n")
    f.write("LargeRJetPt "+str(settings["LargeRJetPt_"+channel])+"\n")
    f.write("LargeRJetEta "+str(settings["LargeRJetEta_"+channel])+"\n")
    f.write("\n")
    f.write("DoLoose Both\n")
    f.write("DoTight False\n")
    f.write("ApplyTightSFsInLooseTree True\n")
    f.write("\n")
    f.write("# For now: enables the dumping of the pre-scale values\n")
    f.write("# In the future: online computation of the MM weights\n")
    f.write("# FakesMMWeights True\n")
    f.write("\n")

def ExperimentalSystematics(f,stream):
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# EXPERIMENTAL SYSTEMATICS                                                     #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n")
    if stream == "jet":
        f.write("Systematics AllSmallRJets")
        f.write("\n")
        f.write("JetUncertainties_NPModel CategoryReduction\n")
        f.write("JetUncertainties_BunchSpacing 25ns\n")
        f.write("JetJERSmearingModel Simple\n")
        f.write("EgammaSystematicModel 1NP_v1\n")
        f.write("LargeRJESUncertaintyConfig mass,Tau32WTA\n")
    elif stream == "sys":
        f.write("Systematics AllElectrons,AllMET,AllMuons\n")
        f.write("JetUncertainties_NPModel CategoryReduction\n")
        f.write("JetUncertainties_BunchSpacing 25ns\n")
        f.write("JetJERSmearingModel Simple\n")
        f.write("EgammaSystematicModel 1NP_v1\n")
        f.write("LargeRJESUncertaintyConfig mass,Tau32WTA\n")
    if stream == "syst":
        f.write("Systematics AllSmallRJets,AllElectrons,AllMET,AllMuons")
        f.write("\n")
        f.write("JetUncertainties_NPModel CategoryReduction\n")
        f.write("JetUncertainties_BunchSpacing 25ns\n")
        f.write("JetJERSmearingModel Simple\n")
        f.write("EgammaSystematicModel 1NP_v1\n")
        f.write("LargeRJESUncertaintyConfig mass,Tau32WTA\n")
    elif stream == "nominal":
        f.write("Systematics Nominal\n")
    else:
        print "[WARNING] Systematic %s not found: treated as 'nominal'"
        f.write("Systematics Nominal\n")
    f.write("\n")



def Output(f,nevt):
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# OUTPUT                                                                       #\n")
    f.write("#                                                                              #\n")
    f.write("# This configuration uses event savers specialised for ttHbb.                  #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n")
    f.write("OutputFilename output.root\n")
    f.write("OutputFormat TTHbbLeptonicEventSaver\n")
    f.write("OutputEvents SelectedEvents\n")
    f.write("OutputFileSetAutoFlushZero True\n")
    if nevt != -1:
        f.write("\n")
        f.write("NEvents "+nevt+"\n")
    f.write("\n")

def GRL(f):
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# GOOD RUN LISTS                                                               #\n")
    f.write("#                                                                              #\n")
    f.write("# http://atlas.web.cern.ch/Atlas/GROUPS/DATABASE/GroupData/GoodRunsLists/      #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n")
    f.write("# GRL for full 2015+2016+2017+2018 dataset (release 21)\n")
    f.write("GRLFile data15_13TeV/20170619/physics_25ns_21.0.19.xml data16_13TeV/20180129/physics_25ns_21.0.19.xml data17_13TeV/20180619/physics_25ns_Triggerno17e33prim.xml data18_13TeV/20190318/physics_25ns_Triggerno17e33prim.xml\n")
    f.write("GRLDir GoodRunsLists\n")
    f.write("\n")

def PileUp(f,campaign):
    f.write("################################################################################\n")
    f.write("#                                                                              #\n")
    f.write("# PILEUP CONFIG                                                                #\n")
    f.write("#                                                                              #\n")
    f.write("################################################################################\n")
    f.write("\n")
    if "mc16" in campaign:
        label = campaign[-1:]
        f.write("# MC16"+label+" pileup profile\n")
        f.write("PRWConfigFiles_FS dev/AnalysisTop/PileupReweighting/user.iconnell.Top.PRW.MC16"+label+".FS.v2/prw.merged.root\n")
        f.write("PRWConfigFiles_AF dev/AnalysisTop/PileupReweighting/user.iconnell.Top.PRW.MC16"+label+".AF.v2/prw.merged.root\n")
        f.write("PRWCustomScaleFactor 1.0/1.03:1.0/0.99:1.0/1.07\n")
        if label == "a":
            f.write("# lumicalc for full 2015+2016 dataset (release 21, 2015:OflLumi-13TeV-008 2016:OflLumi-13TeV-009 - Fully compatible)\n")
            f.write("PRWLumiCalcFiles GoodRunsLists/data15_13TeV/20170619/PHYS_StandardGRL_All_Good_25ns_276262-284484_OflLumi-13TeV-008.root GoodRunsLists/data16_13TeV/20180129/PHYS_StandardGRL_All_Good_25ns_297730-311481_OflLumi-13TeV-009.root\n")
        elif label == "d":
            f.write("# full 2017 dataset (release 21, OflLumi-13TeV-010)\n")
            f.write("PRWLumiCalcFiles GoodRunsLists/data17_13TeV/20180619/physics_25ns_Triggerno17e33prim.lumicalc.OflLumi-13TeV-010.root\n")
            f.write("PRWActualMu_FS GoodRunsLists/data17_13TeV/20180619/physics_25ns_Triggerno17e33prim.actualMu.OflLumi-13TeV-010.root\n")
            f.write("PRWActualMu_AF GoodRunsLists/data17_13TeV/20180619/physics_25ns_Triggerno17e33prim.actualMu.OflLumi-13TeV-010.root\n")
        elif label == "e":
            f.write("# full 2018 dataset (release 21, OflLumi-13TeV-010)\n")
            f.write("PRWLumiCalcFiles GoodRunsLists/data18_13TeV/20190318/ilumicalc_histograms_None_348885-364292_OflLumi-13TeV-010.root\n")
            f.write("PRWActualMu_FS GoodRunsLists/data18_13TeV/20190318/physics_25ns_Triggerno17e33prim.actualMu.OflLumi-13TeV-010.root\n")
            f.write("PRWActualMu_AF GoodRunsLists/data18_13TeV/20190318/physics_25ns_Triggerno17e33prim.actualMu.OflLumi-13TeV-010.root\n")
        else:
            print "[WARNING] Campaign %s not found: treated as 'mc16a'" % campaign
            PileUp(f,"mc16a")
    elif "data" in campaign:
        f.write("# Pile-up profile not needed for data (not used, but is needed to stop crash in configuration)\n")
        f.write("PRWConfigFiles dev/AnalysisTop/PileupReweighting/user.iconnell.Top.PRW.MC16a.FS.v2/prw.merged.root\n")
        f.write("# lumicalc for full 2015+2016+2017+2018 dataset (release 21, OflLumi-13TeV-008 for 2015, OfLumi-13TeV-009 for 2016, OflLumi-13TeV-010 for 2017)\n")
        f.write("PRWLumiCalcFiles GoodRunsLists/data15_13TeV/20170619/PHYS_StandardGRL_All_Good_25ns_276262-284484_OflLumi-13TeV-008.root GoodRunsLists/data16_13TeV/20180129/PHYS_StandardGRL_All_Good_25ns_297730-311481_OflLumi-13TeV-009.root GoodRunsLists/data17_13TeV/20180619/physics_25ns_Triggerno17e33prim.lumicalc.OflLumi-13TeV-010.root GoodRunsLists/data18_13TeV/20190318/ilumicalc_histograms_None_348885-364292_OflLumi-13TeV-010.root\n")
    else:
        print "[WARNING] Campaign %s not found: treated as 'mc16a'"
        PileUp(f,"mc16a")
    f.write("\n")

def MetaData(f):
    f.write(" ###############################################################################\n")
    f.write("#                                                                             #\n")
    f.write("# Meta-data                                                                   #\n")
    f.write("#                                                                             #\n")
    f.write("###############################################################################\n")
    f.write("\n")
    f.write("UseAodMetaData True\n")
    f.write("# the latter shouldn't be necessary anymore with p3388/p3390 samples or newer\n")
    f.write("# IsAFII False\n")
    f.write("\n")

def GlobalTrigger(f,channel,settings):
    f.write("########################\n")
    f.write("### global trigger definition\n")
    f.write("########################\n")
    f.write("\n")
    f.write("UseGlobalLeptonTriggerSF True\n")
    f.write("\n")
    globallabel = ("GT_GlobalTriggers_"+channel)
    if globallabel in settings:
      f.write("GlobalTriggers "+settings["GT_GlobalTriggers_"+channel]+"\n")
      f.write("GlobalTriggersLoose "+settings["GT_GlobalTriggers_"+channel]+"\n")
    else:
      f.write("ElectronTriggers "+settings["GT_ElectronTriggers_"+channel]+"\n")
      f.write("MuonTriggers "+settings["GT_MuonTriggers_"+channel]+"\n")
      f.write("ElectronTriggersLoose "+settings["GT_ElectronTriggers_"+channel]+"\n")
      f.write("MuonTriggersLoose "+settings["GT_MuonTriggers_"+channel]+"\n")
    f.write("\n")

def TTHbbTools(f):
    f.write("TTHBBCREATEEVENT\n")
    f.write("TTHBBEDM\n")
    f.write("TTHBBLARGEJETEDM\n")
    f.write("TTHBBTRUTHEDM\n")
    f.write("TTBARREWEIGHTING\n")

def DataPeriod(f):
    f.write("########################\n")
    f.write("### definition of the data periods\n")
    f.write("### here just for historical reasons\n")
    f.write("#######################\n")
    f.write("\n")
    f.write("SUB period_2015\n")
    f.write("RUN_NUMBER >= 276262\n")
    f.write("RUN_NUMBER <= 284484\n")
    f.write("\n")
    f.write("SUB period_2016\n")
    f.write("RUN_NUMBER >= 297730\n")
    f.write("RUN_NUMBER <= 311481\n")
    f.write("\n")
    f.write("SUB period_2017\n")
    f.write("RUN_NUMBER >= 325713\n")
    f.write("RUN_NUMBER <= 340453\n")
    f.write("\n")
    f.write("SUB period_2018\n")
    f.write("RUN_NUMBER >= 348885\n")
    f.write("RUN_NUMBER <= 360402\n")
    f.write("\n")

def SelectionLooseSSML(f):
    f.write("#################################\n")
    f.write("### Lepton categorisation\n")
    f.write("#################################\n")
    f.write("\n")
    f.write("SUB TRIG_EE\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC \n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_MUMU\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_EMU\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_EEM\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_EMM\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_ALL\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC \n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### standard selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("##Tight OS##\n")
    f.write("SELECTION OSee\n")
    f.write(". TRIG_EE\n")
    f.write("SM4TOPSSSMLCHANNEL 1\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 1 0\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSSMLMLL > 15000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("#############################\n")
    f.write("##OSem tight for QmisID bkg##\n")
    f.write("#############################\n")
    f.write("\n")
    f.write("SELECTION OSem\n")
    f.write(". TRIG_EMU\n")
    f.write("SM4TOPSSSMLCHANNEL 3\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 1 0\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION loose_SSee\n")
    f.write(". TRIG_EE\n")
    f.write("SM4TOPSSSMLCHANNEL 1 1\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 0 1\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSSMLMLLLOOSE > 15000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION loose_SSmm\n")
    f.write(". TRIG_MUMU\n")
    f.write("SM4TOPSSSMLCHANNEL 2 1\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 0 1\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION loose_SSem\n")
    f.write(". TRIG_EMU\n")
    f.write("SM4TOPSSSMLCHANNEL 3 1\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 0 1\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("##loose3l\n")
    f.write("\n")
    f.write("SELECTION loose_eee\n")
    f.write(". TRIG_EE\n")
    f.write("SM4TOPSSSMLCHANNEL 5 1\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION loose_eem\n")
    f.write(". TRIG_EEM\n")
    f.write("SM4TOPSSSMLCHANNEL 6 1\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION loose_emm\n")
    f.write(". TRIG_EMM\n")
    f.write("SM4TOPSSSMLCHANNEL 7 1\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION loose_mmm\n")
    f.write(". TRIG_MUMU\n")
    f.write("SM4TOPSSSMLCHANNEL 8 1\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")



def SelectionSSML(f):
    f.write("#################################\n")
    f.write("### Lepton categorisation\n")
    f.write("#################################\n")
    f.write("\n")
    f.write("SUB TRIG_EE\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC \n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_MUMU\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_EMU\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_EEM\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_EMM\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("SUB TRIG_ALL\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC \n")
    f.write("JETCLEAN LooseBad\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### standard selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SELECTION SSee\n")
    f.write(". TRIG_EE\n")
    f.write("SM4TOPSSSMLCHANNEL 1\n")
    f.write("GTRIGMATCH \n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 0 0\n")
    f.write("SM4TOPSSSMLMLL > 15000\n")
    f.write("SM4TOPSSSMLMLLWIN 81000 101000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION SSmm\n")
    f.write(". TRIG_MUMU\n")
    f.write("SM4TOPSSSMLCHANNEL 2\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 0 0\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION SSem\n")
    f.write(". TRIG_EMU\n")
    f.write("SM4TOPSSSMLCHANNEL 3\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSSMLSSOSDILEPSELECTOR 0 0\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION eee\n")
    f.write(". TRIG_EE\n")
    f.write("SM4TOPSSSMLCHANNEL 5\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION eem\n")
    f.write(". TRIG_EEM\n")
    f.write("SM4TOPSSSMLCHANNEL 6\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION emm\n")
    f.write(". TRIG_EMM\n")
    f.write("SM4TOPSSSMLCHANNEL 7\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION mmm\n")
    f.write(". TRIG_MUMU\n")
    f.write("SM4TOPSSSMLCHANNEL 8\n")
    f.write("GTRIGMATCH\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("###################################\n")
    f.write("### trilepton selections - Z veto\n")
    f.write("###################################\n")
    f.write("\n")
    f.write("SELECTION eee_Zveto\n")
    f.write(". TRIG_EE\n")
    f.write("SM4TOPSSSMLCHANNEL 5\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSMLZVETO 81000 101000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION eem_Zveto\n")
    f.write(". TRIG_EEM\n")
    f.write("SM4TOPSSSMLCHANNEL 6\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSMLZVETO 81000 101000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION emm_Zveto\n")
    f.write(". TRIG_EMM\n")
    f.write("SM4TOPSSSMLCHANNEL 7\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSMLZVETO 81000 101000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("SELECTION mmm_Zveto\n")
    f.write(". TRIG_MUMU\n")
    f.write("SM4TOPSSSMLCHANNEL 8\n")
    f.write("GTRIGMATCH\n")
    f.write("SM4TOPSSMLZVETO 81000 101000\n")
    f.write("NOBADMUON\n")
    f.write(". DECO\n")
    f.write("SAVE\n")

def Selection1LOS(f):
    f.write("########################\n")
    f.write("### lepton trigger and offline cuts for reco-level selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB EL\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("EL_N 28000 >= 1\n")
    f.write("\n")
    f.write("SUB MU\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("MU_N 28000 >= 1\n")
    f.write("\n")
    f.write("SUB EM\n")
    f.write(". BASIC\n")
    f.write("GTRIGDEC\n")
    f.write("EL_N_OR_MU_N 28000 >= 1\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### SM4tops Analysis specific configurations\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB SM4tops_ljets_basic\n")
    TTHbbTools(f)
    f.write("JETTRUTHMATCHING SMALLJETS 0.3\n")
    f.write("DECORATEEVENT\n")
    f.write("DECORATEEVENT1LOS\n")
    f.write("DECORATETRUTH\n")
    f.write("SM4TOPSQGVAR\n")
    f.write("\n")
    f.write("SUB SM4tops_2l_basic\n")
    TTHbbTools(f)
    f.write("JETTRUTHMATCHING SMALLJETS 0.3\n")
    f.write("DECORATEEVENT\n")
    f.write("DECORATEEVENT1LOS\n")
    f.write("DECORATETRUTH\n")
    f.write("SM4TOPSQGVAR\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### e+jets selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB ejets_basic\n")
    f.write("EL_N 10000 >= 1\n")
    f.write("EL_N 10000 == 1\n")
    f.write("MU_N 10000 == 0\n")
    f.write("# at this point this selection is orthogonal to the others\n")
    f.write("EL_N 28000 == 1\n")
    f.write("EL_N_TIGHT 28000 == 1\n")
    f.write("GTRIGMATCH\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("JET_N 25000 >= 7\n")
    f.write("JET_N_BTAG DL1r:FixedCutBEff_77 >= 2\n")
    f.write("\n")
    f.write("SELECTION ejets\n")
    f.write(". EL\n")
    f.write(". ejets_basic\n")
    f.write(". SM4tops_ljets_basic\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### mu+jets selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB mujets_basic\n")
    f.write("MU_N 10000 >= 1\n")
    f.write("MU_N 10000 == 1\n")
    f.write("EL_N 10000 == 0\n")
    f.write("# at this point this selection is orthogonal to the others\n")
    f.write("MU_N 28000 == 1\n")
    f.write("MU_N_TIGHT 28000 == 1\n")
    f.write("GTRIGMATCH\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("JET_N 25000 >= 7\n")
    f.write("JET_N_BTAG DL1r:FixedCutBEff_77 >= 2\n")
    f.write("\n")
    f.write("SELECTION mujets\n")
    f.write(". MU\n")
    f.write(". mujets_basic\n")
    f.write(". SM4tops_ljets_basic\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### ee selections    \n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB ee_basic\n")
    f.write("EL_N 10000 >= 2\n")
    f.write("EL_N 10000 == 2\n")
    f.write("MU_N 10000 == 0\n")
    f.write("# at this point this selection is orthogonal to the others\n")
    f.write("EL_N 28000 >= 1\n")
    f.write("EL_N_TIGHT 10000 == 2\n")
    f.write("GTRIGMATCH\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("JET_N 25000 >= 5\n")
    f.write("JET_N_BTAG DL1r:FixedCutBEff_77 >= 2\n")
    f.write("OS\n")
    f.write("MLL > 15000\n")
    f.write("MLLWIN 83000 99000\n")
    f.write("\n")
    f.write("SELECTION ee\n")
    f.write(". EL\n")
    f.write(". ee_basic\n")
    f.write(". SM4tops_2l_basic\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### mumu selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB mumu_basic\n")
    f.write("MU_N 10000 >= 2\n")
    f.write("MU_N 10000 == 2\n")
    f.write("EL_N 10000 == 0\n")
    f.write("# at this point this selection is orthogonal to the others\n")
    f.write("MU_N 28000 >= 1\n")
    f.write("MU_N_TIGHT 10000 == 2\n")
    f.write("GTRIGMATCH\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("JET_N 25000 >= 5\n")
    f.write("JET_N_BTAG DL1r:FixedCutBEff_77 >= 2\n")
    f.write("OS\n")
    f.write("MLL > 15000\n")
    f.write("MLLWIN 83000 99000\n")
    f.write("\n")
    f.write("SELECTION mumu\n")
    f.write(". MU\n")
    f.write(". mumu_basic\n")
    f.write(". SM4tops_2l_basic\n")
    f.write("SAVE\n")
    f.write("\n")
    f.write("########################\n")
    f.write("### emu selections\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB emu_basic\n")
    f.write("EL_N 10000 >= 1\n")
    f.write("MU_N 10000 >= 1\n")
    f.write("EL_N 10000 == 1\n")
    f.write("MU_N 10000 == 1\n")
    f.write("# at this point this selection is orthogonal to the others\n")
    f.write("EL_N_OR_MU_N 28000 >= 1\n")
    f.write("EL_N_TIGHT 10000 == 1\n")
    f.write("MU_N_TIGHT 10000 == 1\n")
    f.write("GTRIGMATCH\n")
    f.write("JETCLEAN LooseBad\n")
    f.write("JET_N 25000 >= 5\n")
    f.write("JET_N_BTAG DL1r:FixedCutBEff_77 >= 2\n")
    f.write("OS\n")
    f.write("\n")
    f.write("SELECTION emu\n")
    f.write(". EM\n")
    f.write(". emu_basic\n")
    f.write(". SM4tops_2l_basic\n")
    f.write("\n")


def Selection(f,channel,settings):
    f.write("########################\n")
    f.write("### basic selection with mandatory cuts for reco level\n")
    f.write("########################\n")
    f.write("\n")
    f.write("SUB BASIC\n")
    f.write("INITIAL\n")
    f.write("GRL\n")
    f.write("GOODCALO\n")
    f.write("PRIVTX\n")
    f.write("RECO_LEVEL\n")
    if channel == "SSML" or channel == "SSML_loose":
        TTHbbTools(f)
        f.write("LEPTONORDERING\n")
        f.write("\n")
        f.write("SUB DECO\n")
        f.write("DECORATEELECTRONS\n")
        f.write("DECORATEELECTRONSSSML\n")
        f.write("DECORATEMUONS\n")
        f.write("DECORATEEVENT\n")
        f.write("DECORATETRUTH\n")
        f.write("SM4TOPSSSMLEVENTDECORATOR\n")
        f.write("LEPTONVARS\n")
        f.write("SM4TOPSQGVAR\n")
    f.write("\n")
    DataPeriod(f)
    if channel == "SSML":
        SelectionSSML(f)
    elif channel == "1LOS":
        Selection1LOS(f)
    elif channel =="SSML_loose":
	SelectionLooseSSML(f)


def GlobalSelection (f,channel,settings):
    f.write("###############################################################################\n")
    f.write("#                                                                             #\n")
    f.write("# Selections                                                                  #\n")
    f.write("#                                                                             #\n")
    f.write("###############################################################################\n")
    f.write("\n")
    GlobalTrigger(f,channel,settings)
    Selection(f,channel,settings)

parser = argparse.ArgumentParser(description='Generator of configuration files')
parser.add_argument('--campaign', action="store", dest="campaign", help="Comma-separated list of campaigns to generate",default = "NONE")
parser.add_argument('--stream', action="store", dest="stream", help="Comma-separated of streams to process", default = "nominal")
parser.add_argument('--channel', action="store", dest="channel", help="Comma-separated list of channels",default = "NONE")
parser.add_argument('--nevt', action="store", dest="nevt", default=-1, help="Set to the number of events to process")

args = parser.parse_args()

if args.channel == "NONE":
    print "[ERROR] No channel specified"
    sys.exit(1)


if args.campaign == "NONE":
    print "[ERROR] No campaign specified"
    sys.exit(1)

list_of_campaign = ["mc16a","mc16d","mc16e","data"]
list_of_channel = ["1LOS","SSML","SSML_loose"]
list_of_stream = ["nominal","jet","sys","syst"]



settings = dict()
# Settings for SSML
settings ["ObjectLoader_SSML"] = "SM4topsSSMLObjectLoader"
settings ["ElectronPt_SSML"] =  28000
settings ["MuonPt_SSML"] =  28000
settings ["JetPt_SSML"] =  25000
settings ["LargeRJetPt_SSML"] =  200000
settings ["LargeRJetEta_SSML"] =  2.0
settings ["UseECID_SSML"] = "True"
settings ["GT_GlobalTriggers_SSML"] = "2015@2e12_lhloose_L12EM10VH,2mu10,mu18_mu8noL1,e17_lhloose_mu14,e7_lhmedium_mu24,e24_lhmedium_L1EM20VH_OR_e60_lhmedium_OR_e120_lhloose,mu50 2016@2e17_lhvloose_nod0,2mu14,mu22_mu8noL1,e17_lhloose_nod0_mu14,e7_lhmedium_nod0_mu24,e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0,mu50 2017@2e24_lhvloose_nod0,2mu14,mu22_mu8noL1,e17_lhloose_nod0_mu14,e7_lhmedium_nod0_mu24,e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0,mu50 2018@2e24_lhvloose_nod0,2e17_lhvloose_nod0_L12EM15VHI,2mu14,mu22_mu8noL1,e17_lhloose_nod0_mu14,e7_lhmedium_nod0_mu24,e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0,mu50"

# Settings for looseSSML
settings ["ObjectLoader_SSML_loose"] = "SM4topsSSMLObjectLoader"
settings ["ElectronPt_SSML_loose"] =  28000
settings ["MuonPt_SSML_loose"] =  28000
settings ["JetPt_SSML_loose"] =  25000
settings ["LargeRJetPt_SSML_loose"] =  200000
settings ["LargeRJetEta_SSML_loose"] =  2.0
settings ["UseECID_SSML_loose"] = "True"
settings ["GT_GlobalTriggers_SSML_loose"] = "2015@2e12_lhloose_L12EM10VH,2mu10,mu18_mu8noL1,e17_lhloose_mu14,e7_lhmedium_mu24,e24_lhmedium_L1EM20VH_OR_e60_lhmedium_OR_e120_lhloose,mu50 2016@2e17_lhvloose_nod0,2mu14,mu22_mu8noL1,e17_lhloose_nod0_mu14,e7_lhmedium_nod0_mu24,e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0,mu50 2017@2e24_lhvloose_nod0,2mu14,mu22_mu8noL1,e17_lhloose_nod0_mu14,e7_lhmedium_nod0_mu24,e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0,mu50 2018@2e24_lhvloose_nod0,2e17_lhvloose_nod0_L12EM15VHI,2mu14,mu22_mu8noL1,e17_lhloose_nod0_mu14,e7_lhmedium_nod0_mu24,e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0,mu50"

# Settings for 1LOS
settings ["ObjectLoader_1LOS"] = "TTHbbLeptonicObjectLoader"
settings ["ElectronPt_1LOS"] =  10000
settings ["MuonPt_1LOS"] =  10000
settings ["JetPt_1LOS"] =  25000
settings ["LargeRJetPt_1LOS"] =  200000
settings ["LargeRJetEta_1LOS"] =  2.0
settings ["UseECID_1LOS"] = "False"
settings ["GT_ElectronTriggers_1LOS"] = "2015@e24_lhmedium_L1EM20VH_OR_e60_lhmedium_OR_e120_lhloose 2016@e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0 2017@e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0 2018@e26_lhtight_nod0_ivarloose_OR_e60_lhmedium_nod0_OR_e140_lhloose_nod0"
settings ["GT_MuonTriggers_1LOS"] = "2015@mu20_iloose_L1MU15_OR_mu50 2016@mu26_ivarmedium_OR_mu50 2017@mu26_ivarmedium_OR_mu50 2018@mu26_ivarmedium_OR_mu50"


for channel in args.channel.split(","):
    if channel not in list_of_channel:
        print "[WARNING] %s channel not found: skip" % channel
        continue
    for stream in args.stream.split(","):
        if stream not in list_of_stream:
            print "[WARNING] %s stream not found: skip" % stream
            continue
        for campaign in args.campaign.split(","):
            if campaign not in list_of_campaign:
                print "[WARNING] %s campaign not found: skip" % stream
                continue

            config_name = "cuts_"+campaign+"_SM4tops_"+channel
            if stream != "nominal":
                config_name += "_"+stream
            config_name += ".txt"

            print "GENERATING THE CONFIGURATION: %s" % config_name

            f = open (config_name,"w+")

            Intro(f)
            PackageLibraries(f, channel.replace("_loose",""))
            ObjectCollection(f,channel)
            TruthCollection(f)
            ObjectSelection(f,channel,settings)
            ExperimentalSystematics (f,stream)
            Output(f,args.nevt)
            if campaign == "data":
                GRL(f)
            PileUp(f,campaign)
            MetaData(f)
            GlobalSelection(f,channel,settings)

            f.close()
